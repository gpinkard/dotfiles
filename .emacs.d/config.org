#+STARTUP: overview
#+TITLE: Gabe's Emacs Configuration
#+CREATOR: Gabriel Pinkard
* package archives
Package archives to use.
#+BEGIN_SRC emacs-lisp
  (require 'package)

  ;; stupid macos crap
  (when (and (equal emacs-version "27.2")
	     (eql system-type 'darwin))
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ;;("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
#+END_SRC
* use package
Package that is a macro for auto installing and configuring packages.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC
* ui/feel
** tool bar
Disable the toolbar.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC
** menu bar
Disable the menubar.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC
** scrolling
Disable scrollbar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC
Scroll line by line instead of half the buffer at a time.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** cursor
Disable blinking cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
Highlight current line.
#+BEGIN_SRC emacs-lisp
  ;;(global-hl-line-mode nil)
#+END_SRC
** backup/auto-save
Disable emacs backup files and auto-save files.
#+BEGIN_SRC emacs-lisp
  ;; no backup files
  (setq make-backup-files nil)

  ;; no auto save files
  (setq auto-save-default nil)
#+END_SRC
** startup screen
Disable startup screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message nil)
#+END_SRC
** alias yes-or-no-p
Alias 'yes' and 'no' to 'y' and 'n' for all emacs confirm flows
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** faces
Fonts to use.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Inconsolata" :height 120);; :weight 'regular :width 'Regular)
  (set-face-attribute 'fixed-pitch nil :font "Inconsolata" :height 120);; :weight 'regular :width 'Regular)
  (set-face-attribute 'fixed-pitch-serif nil :font "Inconsolata" :height 120);; 'regular :width 'Regular)
  (set-face-attribute 'variable-pitch nil :font "Inconsolata" :height 120);; :weight 'regular :width 'Regular)

  (custom-set-faces
   '(mode-line ((t (:background "#FFFFFF" :foreground "#201D0E" :box (:line-width 2 :color "black" :style released-button) :height 1.0)))))
#+END_SRC
** macos specific
I have to use a Mac for work currently. While this configuration targets Linux, I still want my emacs 
to run on Mac if I have to use one.
 #+BEGIN_SRC emacs-lisp
   ;; use correct path
   (use-package exec-path-from-shell
     :ensure t
     :init
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))

   ;; set meta key to alt for osx instead of option key
   (setq mac-command-modifier 'meta)
 #+END_SRC
* editing
** show-paren-mode
Show matching parens, quotes, braces, etc.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** electric-pair-mode
Complete braces, quotes, parens, etc.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** encoding
 Set default coding system to UTF-8.
 #+BEGIN_SRC emacs-lisp
   (set-default-coding-systems 'utf-8)
 #+END_SRC
** tabs/offset
*** C/C++
Set C/C++ indentation level.
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 8)
#+END_SRC
*** Java
Set Java indentation level.
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4)))
#+END_SRC
* modeline
Configuration for the emacs modeline.
** buffer position stuff
#+BEGIN_SRC emacs-lisp
  ;; display column number in modeline
  (setq column-number-mode t)

  ;; display size indication
  (setq size-indication-mode t)
#+END_SRC
* ansi-term
Configuration for ansi-term.
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
Open a terminal in current buffer (global keybinding).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <return>") 'ansi-term)
#+END_SRC
Colors for ansi-term.
#+BEGIN_SRC emacs-lisp
  '(ansi-color-names-vector
    ["#000000" "#F92672" "#A6E22" "#E6DB74" "#66D9EF" "#AE81FF" "#A1EFE4" "gray90"])
#+END_SRC
* ibuffer
Set ibuffer as default.
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)
  ;; add hook to enable auto-revert-mode in ibuffer
  (add-hook 'ibuffer-mode-hook 'auto-revert-mode)
  (setq auto-revert-verbose nil)
#+END_SRC
No annoying confirmation messages when killing a buffer in ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* packages
** which-key
Package that shows completions for key-chords in a minibuffer.
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :init
      (which-key-mode)
      :config
      ;;(setq which-key-compute-remaps t)
      (setq which-key-show-docstrings t)
      (setq which-key-idle-delay 0.5))
#+END_SRC
** sudo-edit
Edit files as super user.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+END_SRC
** shell-pop
Pop open a shell in a minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :config
    (setq shell-pop-shell-type "/bin/zsh")
    (setq shell-pop-window-height 40)
    (setq shell-pop-shell-type
	  '("ansi-term" "*ansi-term*"
	    (lambda nil
	      (ansi-term shell-pop-term-shell))))
    :bind (("C-;" . shell-pop)))
#+END_SRC
** rainbow-mode
Package that sets background of hex color codes the the color they represent.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook (lambda () (rainbow-mode))))
#+END_SRC
** projectile
Package for switching between projects and finding files.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 0)
    (setq projectile-project-search-path
	  '("~/Jupiter" "~/Projects" "~/dotfiles")))
#+END_SRC
** dashboard
Homescreen that is the first buffer I see when I start an emacs session. Holds recent
files, projects, bookmarks, etc. etc.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome To Gabe's Editor Macros!")
    (setq dashboard-items '((projects . 5)
			    (recents . 5)
			    (agenda . 5)))
    (setq dashboard-set-navigator t)
    ;;(setq dashboard-set-heading-icons t)
    ;;(setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/assets/lain.png"))
#+END_SRC
** tao-theme
Color theme.
#+BEGIN_SRC emacs-lisp
  (defun custom-tao-theme-scale ()
    '(0 0 0 0 0 0 0 0 5 9 14 23 37 60 97 97 158 158 195 218 232 241 246 250 252 253 254 254 255 255 255 255))


  (use-package tao-theme
    :ensure t
    :config
    (setq tao-theme-scale-fn 'custom-tao-theme-scale))

  ;; Set color theme.
  (load-theme 'tao-yang t)
#+END_SRC
** language specific
Language specific modes.
*** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
*** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC    
* my functions
** split and follow
Functions for following a window after a split.
Instead of staying in current window after a split, put cursor in the new window.
#+BEGIN_SRC emacs-lisp
  ;; ;; horizontal split
  ;; (defun split-horizontally-and-follow ()
  ;;   (interactive)
  ;;   (split-window-below)
  ;;   (balance-windows)
  ;;   (other-window 1))
  ;; (global-set-key (kbd "C-x 2") 'split-horizontally-and-follow)

  ;; ;; vertical split
  ;; (defun split-vertically-and-follow ()
  ;;   (interactive)
  ;;   (split-window-right)
  ;;   (balance-windows)
  ;;   (other-window 1))
  ;; (global-set-key (kbd "C-x 3") 'split-vertically-and-follow)
#+END_SRC
