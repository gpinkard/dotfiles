#+STARTUP: content
#+TITLE: Gabe's Emacs Config
#+CREATOR: Gabriel
* packages
** use-package (install if not already installed)
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC
** ivy, swiper, and counsel + settings
*** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-height 15)
    (setq ivy-count-format "[%d/%d] "))
#+END_SRC
*** swiper
#+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :bind (
	     ("C-s" . swiper)))
#+END_SRC
*** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("C-x l" . counsel-locate)
	   ("C-h f" . counsel-describe-function)
	   ("C-h v" . counsel-describe-variable)
	   ("C-h b" . counsel-descbinds)
	   ("C-x b" . counsel-ibuffer)))
#+END_SRC
** other pretty symbols (lambda, ->, etc.)
#+BEGIN_SRC emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-d" . 'dmenu))
#+END_SRC
** neotree (file tree)
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind
    ("C-c n" . 'neotree-toggle)
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** dashboard (custom home screen)
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome To Gabe's Editor Macros!")
    (setq dashboard-items '((recents  . 10)))
    (setq dashboard-set-navigator t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/assets/egg.png"))
#+END_SRC
** auto-completion (company)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** flycheck (linter)
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook (lambda () (flycheck-mode 1))))
#+END_SRC
** show completions for C-_ commands in minibuffer (which-key)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** better window switching (switch-window)
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** magit (git wrapper)
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
    ;;:bind
    ;;("C-c g" . magit-status))
#+END_SRC
** projecticle (project management)
#+BEGIN_SRC emacs-lisp
  ;;(use-package projectile
    ;;:ensure t)
    ;;:config
    ;;())
#+END_SRC
** icons (all-the-icons)
*** icons themselves
#+BEGIN_SRC emacs-lisp
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :ensure t)
#+END_SRC
*** icons for dired (all-the-icons-dired)
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
*** icons for ivy (all-the-icons-ivy)
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :ensure
    :init
    (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+END_SRC
** pop a shell in a minibuffer (shell-pop)
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :config
    (setq shell-pop-shell-type "ansi-term")
    (setq shell-pop-window-height 40)
    :bind (("C-;" . shell-pop)))
#+END_SRC
** org packages
*** pretty bullets in org-mode instead of stars
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** set background of hex color codes to the color they represent (rainbow-mode)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook (lambda () (rainbow-mode))))
#+END_SRC
** highlight parens, brackets etc. w/ matching colors (rainbow-delimiters)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook (lambda () (rainbow-delimiters-mode))))
#+END_SRC
** temporarily highlight cursor for a moment on buffer switch (beacon) (disabled)
#+BEGIN_SRC emacs-lisp
  ;;(use-package beacon
  ;;  :ensure t
  ;;  :init
  ;;  (beacon-mode 0))
#+END_SRC
** popup menu for kill history (kill-ring)
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** edit files as super user (sudo-edit)
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+END_SRC
** language specific packages/modes
*** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
*** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t)
#+END_SRC
*** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
*** graphql
#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode
    :ensure t)
#+END_SRC
*** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
*** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC
*** toml
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :ensure t)
#+END_SRC
** color theme
#+BEGIN_SRC emacs-lisp
  (use-package ample-theme
    :ensure t)
#+END_SRC
** spaceline (spacemacs modeline) consider replacing... slow?
#+BEGIN_SRC emacs-lisp
  ;;(use-package spaceline
  ;;  :ensure t
  ;;  :config
  ;;  (require 'spaceline-config)
  ;;  (setq powerline-default-separator (quote contour))
  ;;  (setq powerline-height 22)
  ;;  (spaceline-emacs-theme))
#+END_SRC
* other configs
** disable annoying tool bar and menu bar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
#+END_SRC
** scrolling
*** disable scroll bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
*** scroll line by line instead of half the buffer
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** backup files (stopping the menace)
*** stop emacs making backup files /everywhere/
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
*** auto-save files are annoying too, go away...
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC
** terminal
*** shell settings
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
*** open a terminal in current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <return>") 'ansi-term)
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (add-hook 'find-file-hook (lambda () (display-line-numbers-mode))))
  ;;(add-hook 'find-file-hook (lambda () (linum-relative-mode)))
#+END_SRC
** cursor
*** disable cursor blink
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
*** highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** org configs
*** make editing source code in src block edit in current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
*** org snipits
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** buffers
*** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** expert (don't confirm on killing buffers in ibuffer)
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+END_SRC
** editing
*** show matching parens, quotes, braces, etc.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
*** complete braces, quotes, parens etc. etc.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
*** move by word (capital letter) in camel case (subword)
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+END_SRC
** stop emacs from being obnoxious
*** alias 'yes' and 'no' to 'y' and 'n' for all confirmations
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** disable startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** stupidity...
*** a kitty
#+BEGIN_SRC emacs-lisp
  ;;(use-package nyan-mode
  ;;  :ensure t
  ;;  :init
  ;;  (nyan-mode 1)
  ;;  (nyan-start-animation))
#+END_SRC
* functions
** open config
#+BEGIN_SRC emacs-lisp
  (defun open-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'open-config)
#+END_SRC
** reload config
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
** follow on window split
*** split window horizontally and follow
#+BEGIN_SRC emacs-lisp
  (defun split-horizontally-and-follow ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-horizontally-and-follow)
#+END_SRC
*** split window vertically and follow
#+BEGIN_SRC emacs-lisp
  (defun split-vertically-and-follow ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-vertically-and-follow)
#+END_SRC
** kill words like vim
#+BEGIN_SRC emacs-lisp
    (defun kill-entire-word ()
      (interactive)
      (forward-char 1)
      (backward-word)
      (kill-word 1))
    (global-set-key (kbd "M-d") 'kill-entire-word)
#+END_SRC
** kill all non-whitelisted buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-non-whitelisted-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-non-whitelisted-buffers)
#+END_SRC
** enable all-the-icons-ivy
#+BEGIN_SRC emacs-lisp
  (defun run-all-the-icons-ivy-setup ()
    (interactive)
    (all-the-icons-ivy-setup))
#+END_SRC
