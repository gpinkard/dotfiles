#+STARTUP: overview
#+TITLE: Gabe's Emacs Configuration
#+CREATOR: Gabriel Pinkard
* use-package
Package that is a macro for auto installing and configuring packages. Just drop init.el and
config.org (this file) into and empty *~/.emacs.d/*, and the entire emacs configuration should 
bootstrap itself. Pretty neat.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC
* modules
Enable module support.
#+BEGIN_SRC emacs-lisp
  (setq module-file-suffix t)
#+END_SRC
* basic UI look and feel
** tool bar
Disable the annoying toolbar that takes up screen realestate and provides nothing useful.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC
** menu bar
My hatred for this thing is just as strong as it is for the toolbar, so I turn it off as well.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC
** scrolling
Scroll bars suck too, just navigate with keystrokes like a normal person.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC
Scroll line by line instead of half the buffer at a time.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** line numbers
Use display-line-numbers-mode when emacs is above the minimum required version. This can be replaced
with linum-mode if your version of emacs does not meet the minimum version requirements, but that
is slower and crappier generally.
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (add-hook 'find-file-hook (lambda () (display-line-numbers-mode))))
#+END_SRC
** cursor
Personally, I don't like blinking cursors as I find them distracting, so disable that.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
Highlight the current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** disable backup files
Emacs likes to create backup files /everywhere/; we must put an end to this menace.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
Auto-save files are annoying *too*, so they need to go away as well.
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC
** MacOS specific stuff
 I have to use a Mac for work currently. While this configuration targets Linux, I still want my emacs 
 to run on Mac if I have to use one.
 #+BEGIN_SRC emacs-lisp
   ;; use correct path
   (use-package exec-path-from-shell
     :ensure t
     :init
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))

   ;; set meta key to alt for osx instead of option key
   (setq mac-command-modifier 'meta)
 #+END_SRC
** no startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** disable yes-or-no-p
Alias 'yes' and 'no' to 'y' and 'n' for all emacs confirm flows.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode t)
#+END_SRC
* icon stuff
** all-the-icons
Pretty icons :o (remember to run *M-x all-the-icons-install-fonts*).
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** all-the-icons-ivy
Adds icons for ivy.
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy
    :ensure t
    :init
    (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
    :config
    (setq all-the-icons-ivy-file-commands
	  '(counsel-find-file counsel-jump-file counsel-recentf counsel-projectile-find-file counsel-projectil-find-dir)))
#+END_SRC
** all-the-icons-dired
Pretty file icons for dired (uses all-the-icons).
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
* editing
** show-paren-mode
Show matching parens, quotes, braces, etc. etc.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** electric-pair-mode
Complete braces, quotes, parens, so on and so forth.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** subword
Move by word (capital letter) in camel case.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda () (subword-mode 1)))
#+END_SRC
** edit-indirect
Edit regions (like markdown code blocks) in separate buffers in their own
regions (like org-edit-src-code).
#+BEGIN_SRC emacs-lisp
  (use-package edit-indirect
    :ensure t)
#+END_SRC
** tabs/offset
*** C/C++
Set C/C++ indentation level.
#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 8)
#+END_SRC
*** Java
Set Java indentation level.
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4)))
#+END_SRC
*** rust
Format rust buffer on save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
#+END_SRC
* Emacs X Window Manager (exwm)
Make emacs act as a window manager. Launch X windows from inside emacs, put them in workspaces, etc. etc.
Great stuff. Now you never have to leave the one true editor again!
#+BEGIN_SRC emacs-lisp
  ;;(use-package exwm
    ;;:ensure t
    ;;:config
    ;;(require 'exwm-config)
    ;; make emacs fullscreen if using exwm 
    ;;(custom-set-variables
    ;; '(initial-frame-alist (quote ((fullscreen . maximized)))))
    ;;(exwm-config-default))
#+END_SRC
* ivy, swiper, and counsel
** ivy
Completion framework for emacs (replaces something like ido), put lists in neat minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;;(setq ivy-height 15)
    (setq ivy-count-format "[%d of %d] "))
#+END_SRC
** swiper
Acts as an isearch replacement for ivy, puts things in a ivy buffer, shows complete line of search hit 
for context. Doing a search in a file in any other text editor/IDE will now feel awful after using swiper.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper))
#+END_SRC
** counsel
Replace emacs commands w/ improved versions that work well with ivy, i.e. find-file -> counsel-find-file.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-c f" . counsel-fzf)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-x d" . counsel-dired)
    ("C-h b" . counsel-descbinds)
    ("C-c i" . counsel-imenu)
    ("C-x b" . counsel-switch-buffer))
#+END_SRC
* color theme and faces
** color theme
Color scheme.
#+BEGIN_SRC emacs-lisp
  (use-package weyland-yutani-theme
    :ensure t)
#+END_SRC
Load theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'weyland-yutani t)
#+END_SRC
Make line number portion of buffer use screen realistate conservatively.
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-width-start t)
#+END_SRC
** faces
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka" :height 170 :weight 'normal :width 'normal)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 170 :weight 'normal :width 'normal)
  (set-face-attribute 'fixed-pitch-serif nil :font "Iosevka" :height 170 :weight 'normal :width 'normal)
#+END_SRC
* dmenu
dmenu for emacs, use it to launch programs (usually graphical ones) for exwm.
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
* avy
Go to a specific char in a buffer. Useful for jumping around to awkward places in a file. I just bound
it to M-s (forward through history), since I can trivially achieve the effect of that command w/ avy,
and more.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* dired stuff
Packages and configs for dired.
** dired-collapse
Render sub-dir/file in directories w/ only one entry (i.e. a directory which has only another directory
inside of it).
#+BEGIN_SRC emacs-lisp
  (use-package dired-collapse
    :ensure t
    :init
    (add-hook 'dired-mode-hook (lambda () (dired-collapse-mode)))
    :config
    (setq dired-collapse-remote t))
#+END_SRC
** auto-revert
Automatically refresh dired buffer on file change.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook 'auto-revert-mode)
  (setq auto-revert-verbose nil)
#+END_SRC
** truncate
Turn off truncating for dired buffers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook 'toggle-truncate-lines 0)
#+END_SRC
* company
Auto completion framework for programming, currently enabled globally.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* flycheck
Linter for various programming languages.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'prog-mode-hook (lambda () (flycheck-mode 1))))
#+END_SRC
* modeline (telephone-line)
Pretty modeline (like powerline for vim).
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    ;; faces
    (defface t-line-red '((t (:foreground "#a9b7ca" :background "#d2344c"))) "")
    (defface t-line-green '((t (:foreground "#a9b7ca" :background "#7c73cc"))) "")

    (setq telephone-line-faces
	'((red . (t-line-red . t-line-red))
	  (green . (t-line-green . t-line-green))
	  (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
	  (nil . (mode-line . mode-line-inactive))))
    ;; separators
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
	telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
	telephone-line-primary-right-separator 'telephone-line-cubed-right
	telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)

    ;; segments
    (setq telephone-line-lhs
	  '((red . (telephone-line-buffer-segment))
	    (green . (telephone-line-airline-position-segment))
	    (nil   . (telephone-line-vc-segment
		      telephone-line-projectile-segment))))
    (setq telephone-line-rhs
	  '((nil    . (telephone-line-misc-info-segment))
	    (green . (telephone-line-major-mode-segment))
	    (red   . (telephone-line-minor-mode-segment))))
    (setq telephone-line-height 22)
    (telephone-line-mode 1))

#+END_SRC
* which-key
Perhaps one of the most awesome emacs packages out there, which key shows completions for keys chords
in a mini buffer at the bottom of the screen. Super useful for learning new emacs commands/bindings.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* dashboard
Homescreen that is the first buffer I see when I start an emacs session. Holds recent files, projects,
bookmarks, etc. etc.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome To Gabe's Editor Macros!")
    (setq dashboard-items '((recents . 5)
			    (projects . 5)))
    (setq dashboard-set-navigator t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/assets/egg.png"))
#+END_SRC
* switch-window
Provides letter overlay when switching windows. Instead of mashing C-x o ten times to get to
the window you are interested in, just do C-x o [letter] and /magically/ arrive in your desired
window.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* magit
Magit is a very powerful git porcelain.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-c g" . magit-status))
#+END_SRC
* ELFEED
Feed reader, better than GNUS or other alternatives that ship with vanilla emacs. No arcane
knowlege required, sane defaults.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind
    ("C-c w" . elfeed)
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-db-directory "~/.emacs.d/elfeed")
    (setq elfeed-search-filter "@3-months-ago +unread")
    (setq elfeed-show-truncate-long-urls t)
    (setq elfeed-feeds
	  '(("https://xkcd.com/atom.xml" comics)
	    ("https://www.smbc-comics.com/comic/rss" comics)
	    ("https://planet.emacslife.com/atom.xml" emacs)
	    ("https://static.fsf.org/fsforg/rss/blogs.xml" fsf)
	    ("https://static.fsf.org/fsforg/rss/news.xml" fsf)
	    ("https://protesilaos.com/news.xml" prot news)
	    ("https://protesilaos.com/politics.xml" prot politics)
	    ("https://protesilaos.com/codelog.xml" prot emacs code)
	    ("https://www.phoronix.com/rss.php" linux news)
	    ("https://www.archlinux.org/feeds/news/" linux arch)
	    ("https://www.linuxfoundation.org/feed/" linux))))
#+END_SRC
* projectile
  Projectile is a project management and navigation tool. Really useful when you are
working on multiple projects and you need to find files quickly.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode 0)
    (setq projectile-project-search-path ' ("~/Jupiter" "~/go/src/jupiterintel.com/" "~/dotfiles"))
    :bind
    ("C-c p" . 'projectile-command-map))
#+END_SRC
Ivy (counsel) integration with projectile.
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode 1))
#+END_SRC
* terminal
** vterm
vterm is an alternative to ansi-term or term, written using a C lib called
libvterm. It is much snappier than other built in alternatives, meaning large
terminal outputs do not lag/act strange.
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :bind
    ("C-x <return>" . 'vterm))
#+END_SRC
** ansi-term
Now I use vterm, which uses a C library instead of elisp. This makes it much
faster than ansi-term or other emacs alternatives. However, I decided to keep
my old ansi-term configs around just in case.
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
Global keybinding to open a terminal in the current buffer.
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "C-x <return>") 'ansi-term)
#+END_SRC
* highlight-symbol
Highlight uses of a variable under cursor.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'highlight-symbol-mode))
#+END_SRC
* browser
When I follow a link in emacs, have it open the link in eww instead of whatever the default
browswer for my os is. Mostly, this is for following RSS links in elfeed.
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
* symon
Package that prints system stats in the modeline.
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-c o" . symon-mode)
    :config
    (setq symon-refresh-rate 2)
    (setq symon-delay 1))
#+END_SRC
* shell-pop
Pop open a shell in a minibuffer. Really useful if you need to run a quick command and don't
want to waste time switching to a terminal buffer.
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :config
    (setq shell-pop-shell-type "/bin/zsh")
    ;;(setq shell-pop-shell-type "vterm")
    (setq shell-pop-window-height 40)
    :bind (("C-;" . shell-pop)))
#+END_SRC
* rainbow-mode
Package that sets background of hex color codes the the color they represent.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook (lambda () (rainbow-mode))))
#+END_SRC
* rainbow-delimiters
Highlight corresponding brackets, parens, etc. with matching colors.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook (lambda () (rainbow-delimiters-mode))))
#+END_SRC
* popup-kill-ring
Popup menu for kill history.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* sudo-edit
Edit files as super user.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+END_SRC
* language specific
Language specific packages, modes, and configurations
** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)

  ;; format buffer using gofmt on buffer save
  (add-hook 'go-mode-hook
	    (lambda () (add-hook 'before-save-hook 'gofmt-before-save)))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :ensure t)

  (setq flycheck-python-flake8-executable "python3")
  (setq flycheck-python-pycompile-executable "python3")
  (setq flycheck-python-pylint-executable "python3")
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t)

  (use-package cargo
    :ensure t)

  ;; run rustfmt when buffer is saved
  (setq rust-format-on-save t)
#+END_SRC
** scala
#+BEGIN_SRC emacs-lisp
  (use-package scala-mode
    :ensure t)
#+END_SRC
** crystal
#+BEGIN_SRC emacs-lisp
  (use-package crystal-mode
    :ensure t)
#+END_SRC
** graphql
#+BEGIN_SRC emacs-lisp
  (use-package graphql-mode
    :ensure t)
#+END_SRC
** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC
** csv
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t)
#+END_SRC
** toml
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
    :ensure t)
#+END_SRC
* buffers
Enable ibuffer (why isn't this the default anyway?).
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  ;; add hook to enable auto-revert-mode in ibuffer
  (add-hook 'ibuffer-mode-hook 'auto-revert-mode)
  (setq auto-revert-verbose nil)
#+END_SRC
No annoying confirmation messages when killing a buffer in ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* org stuff
** org configurations
Make editing source code in src blocks edit in current window
#+BEGIN_SRC emacs-lisp
  ;;(setq org-src-window-setup 'current-window)
#+END_SRC
Custom snipit <el + TAB will create an elisp source block
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC 
** hide emphasis markers
Hide emphasis markers (i.e. / * _) for italics, bold, etc.
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC
** org bullets
Icons for bullets in org mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* my functions
** open-config
Function that opens this config file, bound to *C-c e*.
#+BEGIN_SRC emacs-lisp
  (defun open-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'open-config)
#+END_SRC
** reload-config
Function that reloads this configuration file. Use this to apply configuration changes to current
emacs session after making some changes. Bound to *C-c r*.
#+BEGIN_SRC emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
** split-and-follow functions
Instead of staying in current window after a split, put cursor in the new window.
#+BEGIN_SRC emacs-lisp
  ;; horizontal split
  (defun split-horizontally-and-follow ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-horizontally-and-follow)

  ;; vertical split
  (defun split-vertically-and-follow ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-vertically-and-follow)
#+END_SRC
** create-new-scratch-buffer
Creates a new scratch buffer to evaluate elisp. Bound to *C-c T*.
#+BEGIN_SRC emacs-lisp
  (defun create-new-scratch-buffer ()
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (lisp-interaction-mode))
  (global-set-key (kbd "C-c T") 'create-new-scratch-buffer)
#+END_SRC
* random custom keybindings
Random keybindings that call built in emacs functions
#+BEGIN_SRC emacs-lisp
  ;; open package menu
  (global-set-key (kbd "C-c P") 'package-list-packages)

  ;; customize group
  (global-set-key (kbd "C-c c") 'customize-group)
#+END_SRC
