#+STARTUP: overview
#+TITLE: Gabe's Emacs Configuration
#+CREATOR: Gabriel Pinkard
* User Interface 
User interface configurations (i.e. tool bar, cursor, etc.).
** tool bar
Disable the tool bar.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC
** menu bar
Disable the menubar.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC
** scroll bar
Disable the scroll bar.
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC
** cursor
Disable blinking cursor.
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC
Set cursor shape.
#+BEGIN_SRC emacs-lisp
  ;; (setq cursor-type 'block)
#+END_SRC
** startup screen
Disable the startup screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message nil)
#+END_SRC
** dialog prompts
Stop emacs from using UI dialog boxes.
#+BEGIN_SRC emacs-lisp
  (setq use-dialog-box nil)
#+END_SRC
* Editing
Configurations that impact the editing experience and general feel of emacs.
** parens/braces/quotes/etc.
Show matching parens, quotes, braces, etc.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
Complete braces, quotes, parens, etc.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** file encoding
Set default coding system to UTF-8.
#+BEGIN_SRC emacs-lisp
  (set-default-coding-systems 'utf-8)
#+END_SRC
** tabs/offset
Configurations for tab/offset size for various languages.
#+BEGIN_SRC emacs-lisp
  ;; C/C++ indentation level
  (setq-default c-basic-offset 8)

  ;; Java indentation level
  (add-hook 'java-mode-hook (lambda () (setq c-basic-offset 4)))

  ;; JavaScript indentation level
  (setq js-indent-level 2)

  ;; TypeScript indentation level
  (setq typescript-indent-level 2)
#+END_SRC
** line numbers
Enable line numbers when we are in a programming mode.
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version)
    (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode))))
#+END_SRC
** remember place in file
Have emacs remember the last cursor position of a file you visited.
#+BEGIN_SRC emacs-lisp
  (save-place-mode t)
#+END_SRC
** automatically refresh buffers
Automatically refresh buffers on file changes (i.e. git checkout).
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)

  ;; log that file was reloaded to *Messages* buffer
  (setq auto-revert-verbose t)
#+END_SRC
** scrolling
Configurations that effect how emacs scrolls text.
#+BEGIN_SRC emacs-lisp
  ;; scroll line by line instead of half a buffer at a time
  (setq scroll-conservatively 100)
#+END_SRC
** alias yes-or-no-p
Alias 'yes' and 'no' to 'y' and 'n' for all emacs confirmation flows.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Dired
Settings for directory editor.
** auto revert
Make dired refresh directory contents on changes.
#+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-non-file-buffers t)
#+END_SRC
* OSX
This configuration targets gnu/linux, but I often have to use a mac for work. These
configurations make using emacs for osx more bareable.
#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta)
#+END_SRC
* Org
Configurations for org mode.
** source code editing
Force org to edit src blocks in the same window.
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
* Browser/EWW
Configurations for browsers in emacs, and the emacs web wowser.
#+BEGIN_SRC emacs-lisp
  ;; set default browser to eww
  (setq browse-url-browser-function 'eww-browse-url)

  ;; use duckduckgo by default
  (setq eww-search-prefix "https://duckduckgo.com/html?q=")
#+END_SRC
* Terminal
Configurations for the built in terminals in emacs.
** ansi-term
Force ansi-term to use zsh.
#+BEGIN_SRC emacs-lisp
  (defvar term-shell "/bin/zsh")
  (defadvice ansi-term (before force-zsh)
    (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
Global keybinding to open a terminal in the current frame.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c <return>") 'ansi-term)
#+END_SRC
* Ibuffer
Bind C-x C-b to ibuffer instead of list-buffers.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
Highlight current line when in ibuffer.
#+BEGIN_SRC emacs-lisp
  (add-hook 'ibuffer-hook (lambda () (hl-line-mode)))
#+END_SRC
Disable confirmation messages when killing a buffer in ibuffer.
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
* My Functions
Custom functions I have written for various tasks.
** split and follow windows
Functions for following a window after split.
#+BEGIN_SRC emacs-lisp
  ;; horizontal split
  (defun gabe/split-horizontally-and-follow ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'gabe/split-horizontally-and-follow)

  ;; vertical split
  (defun gabe/split-vertically-and-follow ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 3") 'gabe/split-vertically-and-follow)
#+END_SRC
** reload config
Reload the configuration file.
#+BEGIN_SRC emacs-lisp
  (defun gabe/reload-config ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c c r") 'gabe/reload-config)
#+END_SRC
** open config
Open the configuration file in the current frame.
#+BEGIN_SRC emacs-lisp
  (defun gabe/open-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c c e") 'gabe/open-config)
#+END_SRC
* Packages
** package archives
Setup the package archives to use.
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ;;("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
#+END_SRC
** use package
Package that is a macro for installing and configuring packages.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
#+END_SRC
** vertico
Vertical completion framework that works nicely with native emacs completions.
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))
#+END_SRC
** savehist
Saves minibuffer history to an external file. Vertico uses this to sort the position
of completions.
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+END_SRC
** marginalia
Adds useful information to minibuffer completions.
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    :init
    (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+END_SRC
** orderless
Orderless completion style.
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
** consult
Better search and navigation commands (similar to Counsel package).
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :ensure t
    :hook
    (completion-list-mode . consult-preview-at-point-mode)
    :init
    (setq register-preview-delay 0.5)
    (setq register-preview-function #'consult-register-format)
    :bind
    ("C-s" . consult-line)
    ("C-x b" . consult-buffer)
    ("M-g M-g" . consult-goto-line)
    ("M-y" . consult-yank-pop)
    ("C-c p c g" . consult-grep))
#+END_SRC
** projectile
Package for easily finding files and switching between projects.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :config
    (setq projectile-indexing-method 'alien)
    (setq projectile-sort-order 'recentf)
    (setq projectile-project-search-path '("~/dotfiles" "~/Projects" "~/.emacs.d"))
    :bind
    ("C-c p p" . projectile-command-map))
#+END_SRC
** avy
A package that allows you to jump to text quickly.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("C-;" . avy-goto-char-2))
#+END_SRC
** ace window
Better window switching.
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "C-x o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
** which key
Package that shows completions of key-chords in a minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (setq which-key-compute-remaps t)
    (setq which-key-show-docstrings t)
    (setq which-key-idle-delay 1.5))
#+END_SRC
** vterm
A faster, more responsive terminal in emacs. May need to install whatever the libvterm package
is on the OS.
#+BEGIN_SRC emacs-lisp
  ;; vterm package itself
  (use-package vterm
    :ensure t
    :config
    (setq vterm-always-compile-module t))

  ;; package that enables multiple vterm instances
  (use-package multi-vterm
    :ensure t
    :bind
    ("C-c <return>" . multi-vterm))
#+END_SRC
** exec from shell
Make emacs use environment variables from the shell.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC
** language specific modes
Programming language modes.
#+BEGIN_SRC emacs-lisp
  ;; golang
  (use-package go-mode
    :ensure t)

  ;; rust
  (use-package rust-mode
    :ensure t)

  ;; clojure
  (use-package clojure-mode
    :ensure t)
  (use-package cider
    :ensure t
    :hook
    (clojure-mode . (lambda () (cider-mode))))

  ;; typescript
  (use-package typescript-mode
    :ensure t)

  ;; python
  (use-package python-mode
    :ensure t)

  ;; docker
  (use-package dockerfile-mode
    :ensure t)

  ;; yaml
  (use-package yaml-mode
    :ensure t)

  ;; markdown
  (use-package markdown-mode
    :ensure t)
#+END_SRC
** rainbow mode
Package that sets background of hex color codes the the color they represent.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook
    (prog-mode . rainbow-mode))
#+END_SRC
** elfeed
RSS feed reader for emacs.
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind
    ("C-c p e" . elfeed)
    :config
    (setq elfeed-use-curl t)
    (setq elfeed-db-directory "~/.emacs.d/elfeed")
    (setq elfeed-search-filter "@4-months-ago +unread")
    (setq elfeed-show-truncate-long-urls t)
    (setq elfeed-feeds
	    '(("https://xkcd.com/atom.xml" comics)
	      ("https://www.smbc-comics.com/comic/rss" comics)
	      ("https://planet.emacslife.com/atom.xml" emacs)
	      ("https://static.fsf.org/fsforg/rss/blogs.xml" fsf)
	      ("https://static.fsf.org/fsforg/rss/news.xml" fsf)
	      ("https://protesilaos.com/news.xml" prot news)
	      ("https://protesilaos.com/politics.xml" prot politics)
	      ("https://protesilaos.com/codelog.xml" prot emacs code)
	      ("https://theintercept.com/feed/?rss" the_intercept politics)
	      ("https://fivethirtyeight.com/politics/feed/" fivethirtyeight politics)
	      ("https://defence-blog.com/feed/" military politics news)
	      ("https://www.nasa.gov/rss/dyn/breaking_news.rss" space nasa)
	      ("https://www.nasa.gov/rss/dyn/lg_image_of_the_day.rss" space nasa)
	      ("http://blogs.nasa.gov/stationreport/feed/" space nasa iss)
	      ("http://www.nasa.gov/rss/dyn/chandra_images.rss" space nasa chandra_mission)
	      ("https://www.nasa.gov/rss/dyn/mission_pages/kepler/news/kepler-newsandfeatures-RSS.rss" space nasa keplar_mission)
	      ("https://www.phoronix.com/rss.php" linux news)
	      ("https://www.archlinux.org/feeds/news/" linux arch)
	      ("https://www.linuxfoundation.org/feed/" linux))))
  
#+END_SRC
** theme
Color theme to use.
#+BEGIN_SRC emacs-lisp
   (use-package kaolin-themes
     :ensure t)

   (load-theme 'kaolin-temple t)
#+END_SRC
* Face
Faces to use.
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
		      :font "Menlo"
		      :height 130
		      :weight 'regular
		      :width 'regular)

  (set-face-attribute 'fixed-pitch nil
		      :font "Menlo"
		      :height 130
		      :weight 'regular
		      :width 'regular)

  (set-face-attribute 'fixed-pitch-serif nil
		      :font "Menlo"
		      :height 130
		      :weight 'regular
		      :width 'regular)

  (set-face-attribute 'variable-pitch nil
		      :font "Menlo"
		      :height 130
		      :weight 'regular
		      :width 'regular)
#+END_SRC
